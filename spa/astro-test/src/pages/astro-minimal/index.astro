---
const content = await fetch(
  "http://localhost:8080/magnoliaAuthor/.rest/delivery/pages/v1/react-minimal/"
).then((res) => res.json());
const templateAnnotations = await fetch(
  "http://localhost:8080/magnoliaAuthor/.rest/template-annotations/v1/react-minimal/"
).then((res) => res.json());
console.log(templateAnnotations);
---

<html>
  <head>
    <title>Basic</title>
  </head>
  <body>
    <h1>Basic</h1>
    <oc-headline title="HOOLA"></oc-headline>
    <editable-page
      content={JSON.stringify(content)}
      annotations={JSON.stringify(templateAnnotations)}
    >
    </editable-page>

    <h1>Main</h1>
    <editable-area
      content={JSON.stringify(content["main"])}
      annotations={JSON.stringify(templateAnnotations)}
    >
    </editable-area>

    <h1>Extras</h1>
    <editable-area
      content={JSON.stringify(content["extras"])}
      annotations={JSON.stringify(templateAnnotations)}
    >
    </editable-area>
  </body>
</html>
<script>
  import  provideCivicUiDesignSystem from "../../utils/register";

  provideCivicUiDesignSystem();
</script>

<script>
  import {
    PageEditorBridge,
    PersonalizationService,
    TemplateAnnotations,
  } from "@magnolia/template-annotations";

  import EditableArea from "../../components/magnolia/EditableArea";

  import EditableComment from "../../components/magnolia/EditableComment";

  import EditableComponent from "../../components/magnolia/EditableComponent";

  // Define the behaviour for our new type of HTML element.
  class EditablePage extends HTMLElement {
    static get observedAttributes() {
      return ["content", "annotations"];
    }
    _wrappedTemplateAnnotations = {};
    _content = {};
    _annotations = {};

    constructor() {
      super();
    }

    connectedCallback() {
      PageEditorBridge.init(() => console.log("connected to bridge"));
      PageEditorBridge.onMessage("updateState", (message) => {
        console.log("received update message from bridge");
        const annotations = JSON.parse(this.getAttribute("annotations"));
        const content = JSON.parse(this.getAttribute("content"));
        console.log({ annotations });
        if (!content) return;
        const wrappedContent = TemplateAnnotations.generateMissingAreas(
          content,
          annotations
        );
        const renderingContent = annotations
          ? PersonalizationService.getVariant(wrappedContent, annotations)
          : wrappedContent;
        console.log({ renderingContent });
        const wrappedTemplateAnnotations = PersonalizationService.wrap(
          annotations,
          message.selectedComponentVariants
        );
        const theAnnotations = wrappedTemplateAnnotations[content["@path"]];
        this.render(content, wrappedTemplateAnnotations, theAnnotations);
      });
    }

    render(
      content: object,
      wrappedTemplateAnnotations: object,
      theAnnotations: string
    ) {
      //comment
      const comment = document.createComment(theAnnotations);
      comment.textContent = theAnnotations;

      this.prepend(comment);
      //area
    }
  }
  customElements.define("editable-page", EditablePage);
  customElements.define("editable-area", EditableArea);
  customElements.define("editable-comment", EditableComment);
  customElements.define("editable-component", EditableComponent);
</script>

---
// import {
//   TemplateAnnotations,
//   PageEditorBridge,
//   PersonalizationService,
//   PageEditorBridge
// } from "@magnolia/template-annotations";

// const nodeName = "/nextjs-ssg-minimal";
// const config = {
//   componentMappings: {
//     'nextjs-ssg-minimal-lm:pages/basic': Basic,
//     'nextjs-ssg-minimal-lm:pages/contact': Contact,

//     'spa-lm:components/headline': Headline,
//     'spa-lm:components/image': Image,
//     'spa-lm:components/paragraph': Paragraph,
//     'spa-lm:components/expander': Expander,
//     'spa-lm:components/list': List,
//     'spa-lm:components/listItem': Item,
//   },
// };
// const templateEndpointUrl = getServerPathUrl() + process.env.VUE_APP_MGNL_API_TEMPLATES + removeExtension(path);

// console.log('Get Template Info: ' + templateEndpointUrl);
// const defaultBaseUrl = "http://localhost:8080";
// const pagesApi = defaultBaseUrl + '/.rest/delivery/pages/v1';
// const templateAnnotationsApi = defaultBaseUrl + '/.rest/template-annotations/v1';
// const pagenavApi = defaultBaseUrl + '/.rest/delivery/pagenav/v1';
// const templateAnnotations = await fetch(
//   "http://localhost:8080/magnoliaAuthor/.rest/template-annotations/v1/vue-minimal/"
// ).then((res) => res.json());
// const content = await fetch(
//   "http://localhost:8080/magnoliaAuthor/.rest/delivery/pages/v1/vue-minimal/"
// ).then((res) => res.json());
// PageEditorBridge.init(() => console.log("inited"));
// 	PageEditorBridge.onMessage("updateState", (message) => {
// 	  console.log("updateStateMagnolia", message);
// 	  PersonalizationService.wrap(templateAnnotations, message.selectedComponentVariants);
// 	  const wrappedContent = TemplateAnnotations.generateMissingAreas(content, templateAnnotations);
// 	  const renderingContent = templateAnnotations ? PersonalizationService.getVariant(wrappedContent, templateAnnotations) : wrappedContent;
// 	})

// PersonalizationService.wrap(templateAnnotationsRes);
// TemplateAnnotations.getComponentCommentString(templateAnnotationsRes, 'nextjs-ssg-minimal-lm:pages/basic');
---

<html lang="en">
  <head>
    <script>
      import provideCivicUiDesignSystem from "../../utils/register";
      provideCivicUiDesignSystem();
    </script>

    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body>
    <h1>Astro</h1>
    <oc-test></oc-test>
    <oc-counter></oc-counter>
  </body>
  <script>
    import {
      PageEditorBridge,
      PersonalizationService,
      TemplateAnnotations,
    } from "@magnolia/template-annotations";
    import type Item from "../../components/Item.vue";

    import { componentMappings } from "../../utils/mapping";
    const templateAnnotations = await fetch(
      "http://localhost:8080/magnoliaAuthor/.rest/template-annotations/v1/vue-minimal/"
    ).then((res) => res.json());
    const content = await fetch(
      "http://localhost:8080/magnoliaAuthor/.rest/delivery/pages/v1/vue-minimal/"
    ).then((res) => res.json());
    //Editable Page
    const TEMPLATE_ID_PROP = "mgnl:template";
    PageEditorBridge.init(() => console.log("inited"));
    PageEditorBridge.onMessage("updateState", (message) => {
      console.log("updateStateMagnolia", message);
      const wrappedTemplateAnnotations = PersonalizationService.wrap(
        templateAnnotations,
        message.selectedComponentVariants
      );
      console.log({ wrappedTemplateAnnotations });
      const wrappedContent = TemplateAnnotations.generateMissingAreas(
        content,
        templateAnnotations
      );
      console.log({ wrappedContent });
      const renderingContent = wrappedTemplateAnnotations
        ? PersonalizationService.getVariant(
            wrappedContent,
            wrappedTemplateAnnotations
          )
        : wrappedContent;
      console.log({ renderingContent });
      let componentClass =
        componentMappings[renderingContent[TEMPLATE_ID_PROP]];
      console.log("yo", renderingContent[TEMPLATE_ID_PROP]);
      console.log({ componentClass });
      const annotationString = templateAnnotations[content["@path"]];
      console.log({ annotationString });
      if (annotationString) {
        // const element = document.getElementById('annotation');
        const element = document.createComment(annotationString);
        if (element) {
          element.textContent = annotationString;
          document.appendChild(element);
          console.log({ element });
        }
      }
      //Editable Component
	  const componentContents = content["@nodes"].map(
		(nodeName) => content[nodeName]
	  );
	  console.log({ componentContents });
    });

  </script>
</html>
